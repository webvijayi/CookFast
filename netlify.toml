# Netlify build configuration for a Next.js project

[build]
  # Command to build the Next.js application and ensure static assets are properly copied
  command = "npm run build && cp -r public/* .next/static/ && cp public/cookfast-og.png .next/"
  
  # Explicitly set the publish directory for Next.js builds
  # Next.js uses .next for its build, but we need to make sure
  # static assets from public are also included
  publish = ".next"
  
  # Directory containing serverless functions (API routes)
  # Netlify's Next.js runtime automatically detects functions in pages/api.
  # functions = "netlify/functions" # Typically not needed for Next.js API routes

[dev]
  # Optional: Settings for local development using Netlify Dev CLI
  command = "npm run dev" # Command to start your dev server
  port = 3000             # Port your dev server runs on
  publish = ".next"       # Dev server build directory (if applicable)

# Plugin for essential Next.js features on Netlify
[[plugins]]
  package = "@netlify/plugin-nextjs"

# Configure paths for functions
[functions]
  # Next.js API routes are stored in src/pages/api, but Netlify expects them in netlify/functions
  directory = "src/pages/api"
  node_bundler = "esbuild"
  # Note: Node.js version is set via environment variable in Netlify UI
  included_files = ["public/**/*"] # Include public directory for static assets

# Configure generate-docs as a background function
[functions."generate-docs"]
  node_bundler = "esbuild"
  background = true
  timeout = "900" # 15 minutes for background functions
  memory = 1024 # 1GB memory
  included_files = ["!node_modules/**/*", "public/**/*"] # Exclude node_modules to reduce bundle size, include public directory

# Environment variables configuration
[build.environment]
  # Set Netlify Blobs context - This variable is automatically set by Netlify but defining it here ensures it's available
  NETLIFY_BLOBS_CONTEXT = "production"
  # Node version
  NODE_VERSION = "18"

# Edge Function configuration for Open Graph image generation
[[edge_functions]]
  function = "og"
  path = "/api/og"

# Handle OPTIONS requests for the OG endpoint (needed for some crawlers)
[[headers]]
  for = "/api/og"
  [headers.values]
    Access-Control-Allow-Origin = "*"
    Access-Control-Allow-Methods = "GET, OPTIONS"
    Access-Control-Allow-Headers = "Accept-Encoding, Content-Type"
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    Content-Type = "image/png"
    Cache-Control = "public, max-age=300, s-maxage=3600"

# Fallback rules for OG images if Edge Function fails
[[redirects]]
  from = "/api/og-fallback"
  to = "/cookfast-og.png" 
  status = 200
  force = true

# Ensure proper handling of OpenGraph image requests
[[headers]]
  for = "/cookfast-og.png"
  [headers.values]
    Cache-Control = "public, max-age=86400, s-maxage=31536000"
    Content-Type = "image/png"
